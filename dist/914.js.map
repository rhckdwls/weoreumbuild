{"version":3,"file":"914.js","mappings":"wKAGaA,GAAW,cAAH,mBAAG,CAAH,kEAMRC,GAAO,eAAH,mBAAG,CAAH,6HAQJC,GAAmB,cAAH,mBAAG,CAAH,0a,IA4BN,cAAH,mBAAG,CAAH,6NAWM,iBAAH,mBAAG,CAAH,+DAMI,iBAAH,mBAAG,CAAH,iJAWpB,qBAAGC,OACE,sDAZe,K,SCdxB,EApC4B,SAAC,GAAsD,IAApDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACzDC,GAAcC,EAAAA,EAAAA,QAA4B,OAChDC,EAAAA,EAAAA,YAAU,WACJF,EAAYG,UACdC,EAAAA,EAAAA,GAASJ,EAAYG,WAEtB,IACH,IAAME,GAAgBC,EAAAA,EAAAA,cACpB,SAACC,GACe,UAAVA,EAAEC,MACCD,EAAEE,WACLF,EAAEG,iBACFb,EAAaU,OAInB,CAACV,IAGH,OACE,gBAACL,EAAD,KACE,gBAACC,EAAD,CAAMkB,SAAUd,GACd,gBAACH,EAAD,KACE,4BACEkB,MAAOhB,EACPiB,SAAUf,EACVgB,UAAWT,EACXN,YAAaA,EACbgB,IAAKf,S,gFCtCJgB,GAAc,cAAH,oBAAG,CAAH,wY,wCCQlBC,EAAmB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACpBC,EAAO,WAAYD,EAAOA,EAAKE,OAASF,EAAKG,KACnD,OACE,gBAACL,EAAD,KACE,uBAAKM,UAAU,YACb,uBAAKC,IAAKC,IAAAA,IAAaL,EAAKM,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAKT,EAAKU,YAE3E,uBAAKP,UAAU,aACb,uBAAKA,UAAU,aACb,yBAAIH,EAAKU,UACT,4BAAOC,GAAAA,CAAMZ,EAAKa,WAAWC,OAAO,YAEtC,yBAAId,EAAKe,YAMjB,GAAeC,EAAAA,EAAAA,MAAKjB,GC1BPkB,GAAW,cAAH,mBAAG,CAAH,0DAMRC,GAAU,kBAAH,mBAAG,CAAH,qEAKPC,GAAe,cAAH,mBAAG,CAAH,+Z,qHCCzB,IA8BA,EA9B6B,SAAC,GAAoE,IAAlEC,EAAkE,EAAlEA,aAAcC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,QAAkBC,GAAoB,EAA7BC,QAA6B,EAApBD,eACtEE,GAAWrC,EAAAA,EAAAA,cAAY,SAACsC,GACH,IAArBA,EAAOC,WAAoBJ,IAC7BK,QAAQC,IAAI,QAEZP,GAAQ,SAACQ,GAAD,OAAcA,EAAW,KAAGC,MAAK,kBAI1C,IACH,OACE,gBAACd,EAAD,KACE,gBAAC,KAAD,CAAYe,UAAQ,EAACnC,IAAKwB,EAAcY,cAAeR,GACpDS,OAAOC,QAAQf,GAAcgB,KAAI,YAAmB,I,IAAA,G,EAAA,E,4CAAA,I,gxBAAjBC,EAAiB,KAAXC,EAAW,KACnD,OACE,gBAACpB,EAAD,CAASd,UAAS,kBAAaiC,GAAQ/C,IAAK+C,GAC1C,gBAAClB,EAAD,KACE,8BAASkB,IAEVC,EAAMF,KAAI,SAAC1D,GAAD,OACT,gBAAC,EAAD,CAAMY,IAAKZ,EAAK6D,GAAIvC,KAAMtB,e,8EC/B3B,SAAS8D,EAAYC,GAClC,IAAMC,EAA+C,GASrD,OARAD,EAASE,SAAQ,SAACjE,GAChB,IAAMkE,EAAYhC,GAAAA,CAAMlC,EAAKmC,WAAWC,OAAO,cAC3C+B,MAAMC,QAAQJ,EAASE,IACzBF,EAASE,GAAWG,KAAKrE,GAEzBgE,EAASE,GAAa,CAAClE,MAGpBgE","sources":["webpack://weoreum-ts/./components/ChatBox/styles.ts","webpack://weoreum-ts/./components/ChatBox/index.tsx","webpack://weoreum-ts/./components/Chat/styles.tsx","webpack://weoreum-ts/./components/Chat/index.tsx","webpack://weoreum-ts/./components/ChatList/styles.ts","webpack://weoreum-ts/./components/ChatList/index.tsx","webpack://weoreum-ts/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\n// import { MentionsInput } from 'react-mentions';\r\n\r\nexport const ChatArea = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n  padding-top: 0;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  color: rgb(29, 28, 29);\r\n  font-size: 15px;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgb(29, 28, 29);\r\n`;\r\n\r\nexport const MentionsTextarea = styled.div`\r\n  font-family: Slack-Lato, appleLogo, sans-serif;\r\n  font-size: 15px;\r\n  padding: 8px 9px;\r\n  & strong {\r\n    background: skyblue;\r\n  }\r\n  & textarea {\r\n    height: 44px;\r\n    width: 100%;\r\n    padding: 9px 10px !important;\r\n    outline: none !important;\r\n    border-radius: 4px !important;\r\n    resize: none !important;\r\n    line-height: 22px;\r\n    border: none;\r\n  }\r\n  & ul {\r\n    border: 1px solid lightgray;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    padding: 9px 10px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const Toolbox = styled.div`\r\n  position: relative;\r\n  background: rgb(248, 248, 248);\r\n  height: 41px;\r\n  display: flex;\r\n  border-top: 1px solid rgb(221, 221, 221);\r\n  align-items: center;\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n`;\r\n\r\nexport const SendButton = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n`;\r\n\r\nexport const EachMention = styled.button<{ focus: boolean }>`\r\n  padding: 4px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(28, 29, 28);\r\n  width: 100%;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n  ${({ focus }) =>\r\n    focus &&\r\n    `\r\n    background: #1264a3;\r\n    color: white;\r\n  `};\r\n`;\r\n","import React, { useCallback, useEffect, useRef, VFC } from 'react';\r\nimport { ChatArea, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\r\nimport autosize from 'autosize';\r\nimport { Mention } from 'react-mentions';\r\n\r\ninterface Props {\r\n  chat: string;\r\n  onSubmitForm: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      autosize(textareaRef.current);\r\n    }\r\n  }, []);\r\n  const onKeydownChat = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey) {\r\n          e.preventDefault();\r\n          onSubmitForm(e);\r\n        }\r\n      }\r\n    },\r\n    [onSubmitForm],\r\n  );\r\n\r\n  return (\r\n    <ChatArea>\r\n      <Form onSubmit={onSubmitForm}>\r\n        <MentionsTextarea>\r\n          <textarea\r\n            value={chat}\r\n            onChange={onChangeChat}\r\n            onKeyDown={onKeydownChat}\r\n            placeholder={placeholder}\r\n            ref={textareaRef}\r\n          />\r\n        </MentionsTextarea>\r\n      </Form>\r\n    </ChatArea>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatWrapper = styled.div`\r\n  display: flex;\r\n  padding: 8px 20px;\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n  & .chat-img {\r\n    display: flex;\r\n    width: 36px;\r\n    margin-right: 8px;\r\n    & img {\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n  & .chat-text {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex: 1;\r\n    & p {\r\n      flex: 0 0 100%;\r\n      margin: 0;\r\n    }\r\n  }\r\n  & .chat-user {\r\n    display: flex;\r\n    flex: 0 0 100%;\r\n    align-items: center;\r\n    & > b {\r\n      margin-right: 5px;\r\n    }\r\n    & > span {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n  & a {\r\n    text-decoration: none;\r\n    color: deepskyblue;\r\n  }\r\n`;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport React, { memo, VFC } from 'react';\r\nimport { ChatWrapper } from './styles';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\n\r\ninterface Props {\r\n  data: IDM | IChat;\r\n}\r\n\r\nconst Chat: VFC<Props> = ({ data }) => {\r\n  const user = 'Sender' in data ? data.Sender : data.User;\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"chat-img\">\r\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\r\n      </div>\r\n      <div className=\"chat-text\">\r\n        <div className=\"chat-user\">\r\n          <b>{user.nickname}</b>\r\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\r\n        </div>\r\n        <p>{data.content}</p>\r\n      </div>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatZone = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  margin-top: 20px;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: white;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import Chat from '@components/Chat';\r\nimport { IChat, IDM } from '@typings/db';\r\nimport React, { RefObject, useCallback, useRef, VFC } from 'react';\r\nimport { ChatZone, Section, StickyHeader } from './styles';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\n\r\ninterface Props {\r\n  chatSections: { [key: string]: (IDM | IChat)[] };\r\n  scrollbarRef: RefObject<Scrollbars>;\r\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\r\n  isEmpty: boolean;\r\n  isReachingEnd: boolean;\r\n}\r\n\r\nconst ChatList: VFC<Props> = ({ chatSections, scrollbarRef, setSize, isEmpty, isReachingEnd }) => {\r\n  const onScroll = useCallback((values) => {\r\n    if (values.scrollTop === 0 && !isReachingEnd) {\r\n      console.log('가장 위');\r\n      // 데이터 추가 로딩\r\n      setSize((prevSize) => prevSize + 1).then(() => {\r\n        // 스크롤 위치 유지\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <ChatZone>\r\n      <Scrollbars autoHide ref={scrollbarRef} onScrollFrame={onScroll}>\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          return (\r\n            <Section className={`section-${date}`} key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats.map((chat) => (\r\n                <Chat key={chat.id} data={chat} />\r\n              ))}\r\n            </Section>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </ChatZone>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\n\r\nexport default function makeSection(chatList: (IDM | IChat)[]) {\r\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\r\n  chatList.forEach((chat) => {\r\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n    if (Array.isArray(sections[monthDate])) {\r\n      sections[monthDate].push(chat);\r\n    } else {\r\n      sections[monthDate] = [chat];\r\n    }\r\n  });\r\n  return sections;\r\n}\r\n"],"names":["ChatArea","Form","MentionsTextarea","focus","chat","onSubmitForm","onChangeChat","placeholder","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","onSubmit","value","onChange","onKeyDown","ref","ChatWrapper","Chat","data","user","Sender","User","className","src","gravatar","email","s","d","alt","nickname","dayjs","createdAt","format","content","memo","ChatZone","Section","StickyHeader","chatSections","scrollbarRef","setSize","isReachingEnd","isEmpty","onScroll","values","scrollTop","console","log","prevSize","then","autoHide","onScrollFrame","Object","entries","map","date","chats","id","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}