{"version":3,"file":"251.js","mappings":"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","sources":["webpack://weoreum-ts/./pages/DirectMessage/styles.ts","webpack://weoreum-ts/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 70px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  border-top: solid 1px rgba(1, 1, 1, 0.2);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { Container, Header } from './styles';\r\nimport gravatar from 'gravatar';\r\nimport useSWR from 'swr';\r\nimport fetcher from '@utils/fetcher';\r\nimport { useParams } from 'react-router';\r\nimport ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport axios from 'axios';\r\nimport { IDM } from '@typings/db';\r\nimport makeSection from '@utils/makeSection';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction DirecMessage() {\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n  const { data: myData, error, mutate } = useSWR('/api/users', fetcher);\r\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n\r\n  const [socket] = useSocket(workspace);\r\n\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (chat?.trim() && chatData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat();\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n\r\n  const onMessage = useCallback(\r\n    (data: IDM) => {\r\n      if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n        mutateChat((chatData) => {\r\n          chatData?.[0].unshift(data);\r\n          return chatData;\r\n        }, false).then(() => {\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n            ) {\r\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 100);\r\n            } else {\r\n              toast.success('새 메시지가 도착했습니다.', {\r\n                onClick() {\r\n                  scrollbarRef.current?.scrollToBottom();\r\n                },\r\n                closeOnClick: true,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [id, myData, mutateChat],\r\n  );\r\n\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  // 로딩 시 스크롤바 제일 아래로\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  if (!myData || !userData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\r\n        <span>{userData.nickname}</span>\r\n      </Header>\r\n      <ChatList\r\n        chatSections={chatSections}\r\n        scrollbarRef={scrollbarRef}\r\n        setSize={setSize}\r\n        isEmpty={isEmpty}\r\n        isReachingEnd={isReachingEnd}\r\n      />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} placeholder=\"채팅입력\" />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default DirecMessage;\r\n"],"names":["Container","Header","scrollbarRef","useRef","useParams","workspace","id","useSWR","fetcher","myData","data","userData","error","mutate","useSWRInfinite","index","chatData","mutateChat","setSize","socket","useSocket","isEmpty","length","isReachingEnd","useInput","chat","onChangeChat","setChat","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","console","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","log","getValues","setTimeout","toast","onClick","closeOnClick","useEffect","on","off","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ChatBox","placeholder"],"sourceRoot":""}