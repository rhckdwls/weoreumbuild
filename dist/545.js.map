{"version":3,"file":"545.js","mappings":"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","sources":["webpack://weoreum-ts/./pages/Channel/styles.ts","webpack://weoreum-ts/./pages/Channel/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 70px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 62px;\r\n  display: flex;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  border-top: solid 1px rgba(1, 1, 1, 0.2);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & .header-right {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n  }\r\n`;\r\n","import ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { Header, Container } from '@pages/Channel/styles';\r\nimport { IChannel, IChat, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport makeSection from '@utils/makeSection';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\nimport { useParams } from 'react-router';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport useSWR from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport InviteChannelModal from '@components/inviteChannelModal';\r\nimport { GrUserAdd } from 'react-icons/gr';\r\n\r\nconst PAGE_SIZE = 20;\r\nconst Channel = () => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const [socket] = useSocket(workspace);\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { data: channelsData } = useSWR<IChannel[]>(`/api/workspaces/${workspace}/channels`, fetcher);\r\n  const channelData = channelsData?.find((v) => v.name === channel);\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IChat[]>(\r\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\r\n    fetcher,\r\n    {\r\n      onSuccess(data) {\r\n        if (data?.length === 1) {\r\n          setTimeout(() => {\r\n            scrollbarRef.current?.scrollToBottom();\r\n          }, 100);\r\n        }\r\n      },\r\n    },\r\n  );\r\n  const { data: channelMembersData } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const [dragOver, setDragOver] = useState(false);\r\n\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowInviteChannelModal(false);\r\n  }, []);\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (chat?.trim() && chatData && channelData && userData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            UserId: userData.id,\r\n            User: userData,\r\n            createdAt: new Date(),\r\n            ChannelId: channelData.id,\r\n            Channel: channelData,\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\r\n          setChat('');\r\n          if (scrollbarRef.current) {\r\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n            scrollbarRef.current.scrollToBottom();\r\n          }\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\r\n            content: savedChat,\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, workspace, channel, channelData, userData, chatData, mutateChat, setChat],\r\n  );\r\n\r\n  const onMessage = useCallback(\r\n    (data: IChat) => {\r\n      if (\r\n        data.Channel.name === channel &&\r\n        (data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') || data.UserId !== userData?.id)\r\n      ) {\r\n        mutateChat((chatData) => {\r\n          chatData?.[0].unshift(data);\r\n          return chatData;\r\n        }, false).then(() => {\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n            ) {\r\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 100);\r\n            } else {\r\n              toast.success('새 메시지가 도착했습니다.', {\r\n                onClick() {\r\n                  scrollbarRef.current?.scrollToBottom();\r\n                },\r\n                closeOnClick: true,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [channel, userData, mutateChat],\r\n  );\r\n\r\n  useEffect(() => {\r\n    socket?.on('message', onMessage);\r\n    return () => {\r\n      socket?.off('message', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\r\n  }, [workspace, channel]);\r\n\r\n  const onClickInviteChannel = useCallback(() => {\r\n    setShowInviteChannelModal(true);\r\n  }, []);\r\n\r\n  if (channelsData && !channelData) {\r\n    return <Redirect to={`/workspace/${workspace}/channel/일반`} />;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <span>#{channel}</span>\r\n        <div className=\"header-right\">\r\n          <span>{channelMembersData?.length}</span>\r\n          <button\r\n            onClick={onClickInviteChannel}\r\n            className=\"c-button-unstyled p-ia__view_header__button\"\r\n            aria-label=\"Add people to #react-native\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"button\"\r\n          >\r\n            <GrUserAdd style={{ fontSize: '20px' }} />\r\n          </button>\r\n        </div>\r\n      </Header>\r\n      <ChatList\r\n        scrollbarRef={scrollbarRef}\r\n        isReachingEnd={isReachingEnd}\r\n        isEmpty={isEmpty}\r\n        chatSections={chatSections}\r\n        setSize={setSize}\r\n      />\r\n      <ChatBox\r\n        onSubmitForm={onSubmitForm}\r\n        chat={chat}\r\n        onChangeChat={onChangeChat}\r\n        placeholder={`Message #${channel}`}\r\n      />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n"],"names":["Container","Header","useParams","workspace","channel","socket","useSocket","userData","useSWR","fetcher","data","channelsData","channelData","find","v","name","useSWRInfinite","index","onSuccess","length","setTimeout","scrollbarRef","current","scrollToBottom","chatData","mutateChat","mutate","setSize","channelMembersData","useInput","chat","onChangeChat","setChat","useState","showInviteChannelModal","setShowInviteChannelModal","useRef","isEmpty","isReachingEnd","onCloseModal","useCallback","onSubmitForm","e","preventDefault","trim","savedChat","prevChatData","unshift","id","content","UserId","User","createdAt","Date","ChannelId","Channel","then","localStorage","setItem","getTime","toString","console","log","getValues","axios","catch","error","onMessage","startsWith","getScrollHeight","getClientHeight","getScrollTop","toast","onClick","closeOnClick","useEffect","on","off","onClickInviteChannel","to","chatSections","makeSection","flat","reverse","className","type","style","fontSize","ChatList","ChatBox","placeholder","show"],"sourceRoot":""}